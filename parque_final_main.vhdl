-- Net parque_final - IOPT
-- Automatic code generated by IOPT2VHDL XSLT transformation.
-- by GRES Research Group - 2015 


Library IEEE;
Use IEEE.STD_LOGIC_1164.ALL;
Use IEEE.STD_LOGIC_ARITH.ALL;
Use IEEE.STD_LOGIC_UNSIGNED.ALL;


Entity parque_final_main IS
Port(
    Clk : IN STD_LOGIC;
    Enable : IN STD_LOGIC;
    Reset : IN STD_LOGIC;
	 sw0 : IN STD_LOGIC;
	 SW1 : IN STD_LOGIC;
	 SW2 : IN STD_LOGIC;
	 SW3 : IN STD_LOGIC;
	 SW4 : IN STD_LOGIC;
	 SW5 : IN STD_LOGIC;
	 SW6 : IN STD_LOGIC;
	 SW7 : IN STD_LOGIC;
	 button_1 : IN STD_LOGIC;
	 button_2 : IN STD_LOGIC;
	 button_3 : IN STD_LOGIC;
	 led0 : OUT STD_LOGIC;
	 led1 : OUT STD_LOGIC;
	 led2 : OUT STD_LOGIC;
	 led3 : OUT STD_LOGIC;
	 led4 : OUT STD_LOGIC;
	 led5 : OUT STD_LOGIC;
	 led6 : OUT STD_LOGIC;
	 led7 : OUT STD_LOGIC;
	 an3 : out std_logic; 
	 an2 : out std_logic;
	 an1 : out std_logic;
	 an0 : out std_logic;
	 algarismo : out  STD_LOGIC_VECTOR (7 downto 0)
);
End parque_final_main;



Architecture Structural OF parque_final_main IS

  -- Component Definition:
  Component parque_final IS
  Port(
      Clk : IN STD_LOGIC;
      PRES1_IN : IN STD_LOGIC;
      TICKET_IN : IN STD_LOGIC;
      PRES2_IN : IN STD_LOGIC;
      PRESS1_OUT : IN STD_LOGIC;
      PRESS2_OUT : IN STD_LOGIC;
      TICKET_OUT : IN STD_LOGIC;
      AND_21A : IN STD_LOGIC;
      AND_21B : IN STD_LOGIC;
      PRESS1_IN_2 : IN STD_LOGIC;
      PRESS2_IN_2 : IN STD_LOGIC;
      TICKET_IN_2 : IN STD_LOGIC;
      PRESS1_OUT_2 : IN STD_LOGIC;
      PRESS2_OUT_2 : IN STD_LOGIC;
      TICKET_OUT_2 : IN STD_LOGIC;
      PRESS1_IN_3 : IN STD_LOGIC;
      PRESS2_IN_3 : IN STD_LOGIC;
      TICKET_IN_3 : IN STD_LOGIC;
      PRESS1_OUT_3 : IN STD_LOGIC;
      PRESS2_OUT_3 : IN STD_LOGIC;
      TICKET_OUT_3 : IN STD_LOGIC;
      AND_12A : IN STD_LOGIC;
      AND_12B : IN STD_LOGIC;
      CANC_IN : OUT STD_LOGIC;
      CANC_OUT : OUT STD_LOGIC;
      CANC_IN_2 : OUT STD_LOGIC;
      CANC_OUT_2 : OUT STD_LOGIC;
      PISO2_FULL : OUT STD_LOGIC;
      PISO1_FULL : OUT STD_LOGIC;
      CANC_OUT_3 : OUT STD_LOGIC;
      CANC_IN_3 : OUT STD_LOGIC;
      CARRO_IN_2 : OUT STD_LOGIC;
      CARRO_IN_3 : OUT STD_LOGIC;
      CARRO_IN : OUT STD_LOGIC;
      CARRO_OUT : OUT STD_LOGIC;
      CARRO_OUT_2 : OUT STD_LOGIC;
      CARRO_OUT_3 : OUT STD_LOGIC;
      OCU_PISO_1 : OUT INTEGER RANGE 0 TO 100;
      OCU_PISO_2 : OUT INTEGER RANGE 0 TO 100;
		Carro_12 : OUT STD_LOGIC;
		Carro_21 : OUT STD_LOGIC;
		ABERTO_IN : IN STD_LOGIC;
		ABERTO_OUT : IN STD_LOGIC;
      Enable : IN STD_LOGIC;
      Reset : IN STD_LOGIC
  );
  End Component parque_final;
  
  Component interface IS
  Port(
		clk : in STD_LOGIC;
		rst : in STD_LOGIC;
		sw0: in STD_LOGIC;
		sw1: in STD_LOGIC;
		sw2: in STD_LOGIC;
		sw3: in STD_LOGIC;
		sw4: in STD_LOGIC;
		sw5: in STD_LOGIC;
		sw6: in STD_LOGIC;
		sw7: in STD_LOGIC;
		led_0 : out STD_LOGIC;
		led_1 : out STD_LOGIC;
		led_2 : out STD_LOGIC;
		led_3 : out STD_LOGIC;
		led_4 : out STD_LOGIC;
		led_5 : out STD_LOGIC;
		led_6 : out STD_LOGIC;
		led_7 : out STD_LOGIC;
		PRES1_IN : OUT STD_LOGIC;
      TICKET_IN : OUT STD_LOGIC;
      PRES2_IN : OUT STD_LOGIC;
      PRESS1_OUT : OUT STD_LOGIC;
      PRESS2_OUT : OUT STD_LOGIC;
      TICKET_OUT : OUT STD_LOGIC;
      AND_21A : OUT STD_LOGIC;
      AND_21B : OUT STD_LOGIC;
      PRESS1_IN_2 : OUT STD_LOGIC;
      PRESS2_IN_2 : OUT STD_LOGIC;
      TICKET_IN_2 : OUT STD_LOGIC;
      PRESS1_OUT_2 : OUT STD_LOGIC;
      PRESS2_OUT_2 : OUT STD_LOGIC;
      TICKET_OUT_2 : OUT STD_LOGIC;
      PRESS1_IN_3 : OUT STD_LOGIC;
      PRESS2_IN_3 : OUT STD_LOGIC;
      TICKET_IN_3 : OUT STD_LOGIC;
      PRESS1_OUT_3 : OUT STD_LOGIC;
      PRESS2_OUT_3 : OUT STD_LOGIC;
      TICKET_OUT_3 : OUT STD_LOGIC;
      AND_12A : OUT STD_LOGIC;
      AND_12B : OUT STD_LOGIC;
      CANC_IN : IN STD_LOGIC;
      CANC_OUT : IN STD_LOGIC;
      CANC_IN_2 : IN STD_LOGIC;
      CANC_OUT_2 : IN STD_LOGIC;
      PISO2_FULL : IN STD_LOGIC;
      PISO1_FULL : IN STD_LOGIC;
      CANC_OUT_3 : IN STD_LOGIC;
      CANC_IN_3 : IN STD_LOGIC;
		pressure_button_1 : IN STD_LOGIC;
		pressure_button_2 : IN STD_LOGIC;
		pressure_button_3 : IN STD_LOGIC;
		b_clock : OUT STD_LOGIC;
		b_modo_inc: OUT STD_LOGIC;
		b_inc: OUT STD_LOGIC;
		inc_min : in STD_LOGIC;
		inc_hour : in STD_LOGIC;
		ocupacao_1 : in integer range 0 to 100;
		ocupacao_2 : in integer range 0 to 100;
		--lot_d : out integer range 0 to 9;
		--lot_u : out integer range 0 to 9;
		lug_in_1 : out STD_LOGIC;
		modo_relogio : out STD_LOGIC
		--modo_relogio : out STD_LOGIC
  );
  End Component interface;
  
  COMPONENT relogio 
	PORT( 
		clk : IN std_logic; 
		reset : IN std_logic;  
		c_min_u : OUT integer range 0 to 9; 
		c_min_d : OUT integer range 0 to 5;
		c_hour_u: OUT integer range 0 to 9;
		c_hour_d: OUT integer range 0 to 2;
	   new_min_u : in integer range 0 to 9;
	   new_min_d : in integer range 0 to 5; 
	   new_hour_u : in integer range 0 to 9;
	   new_hour_d : in integer range 0 to 2;
	   update_time : in STD_LOGIC;
		aberto_in : out STD_LOGIC;
		aberto_out : out STD_LOGIC
		);
	END COMPONENT;
	
	COMPONENT principal_st_mach
	Port ( clk : in  STD_LOGIC;
           reset : in  STD_LOGIC;
			  button_acerta : in STD_LOGIC;
			  button_modo_inc : in STD_LOGIC;
			  modo_inc : out STD_LOGIC;
			  inc_finish : in STD_LOGIC;
			  update_time : out STD_LOGIC
			  );
	end COMPONENT;

	COMPONENT incrementador 
    Port ( clk : in  STD_LOGIC;
           reset : in  STD_LOGIC;
			  clear_inc : in STD_LOGIC;
           inc : in  STD_LOGIC; --but達o de press達o de incrementar
			  min_inc : in STD_LOGIC; --sinal para incrementar minutos
			  hora_inc : in STD_LOGIC; --sinal para incrementar horas
           new_min_u : out  integer range 0 to 9;
           new_min_d : out  integer range 0 to 5;
           new_hora_u : out  integer range 0 to 9;
           new_hora_d : out  integer range 0 to 2);
	end COMPONENT;

	COMPONENT inc_st_mach 
    Port ( clk : in  STD_LOGIC;
           reset : in  STD_LOGIC;
			  clear_inc : out STD_LOGIC;
			  button_inc : in STD_LOGIC;
			  button_modo_inc : in STD_LOGIC;
			  button_acerta : in STD_LOGIC;
			  LED_inc_min : out STD_LOGIC;
			  LED_inc_hour : out STD_LOGIC;
           inc : out  STD_LOGIC; --but達o de press達o de incrementar
			  min_inc : out STD_LOGIC; --sinal para incrementar minutos
			  hora_inc : out STD_LOGIC; --sinal para incrementar horas
			  modo_inc : in STD_LOGIC;
			  inc_finish : out STD_LOGIC);
	end COMPONENT;
  
  COMPONENT conv_displays 
	PORT( 
		clk : IN std_logic; 
		reset : IN std_logic; 
--		modo_rel : IN std_logic;
		--lotu : in integer range 0 to 9;
		--lotd : in integer range 0 to 9;
		--p1_full : IN std_logic;
		--p2_full : in std_logic;
		modo_inc : in STD_LOGIC;
		min_u : IN integer range 0 to 9; 
		min_d : IN integer range 0 to 5; 
		hour_u : IN integer range 0 to 9; 
		hour_d : IN integer range 0 to 2;
	   i_min_u : in  integer range 0 to 9;
	   i_min_d : in  integer range 0 to 5;
	   i_hour_u : in  integer range 0 to 9;
	   i_hour_d : in  integer range 0 to 2;
		an3 : OUT std_logic; 
		an2 : OUT std_logic; 
		an1 : OUT std_logic; 
		an0 : OUT std_logic; 
		lug_in_1 : in STD_LOGIC;
	   modo_relogio : in STD_LOGIC;
	   c_in_1_u : in integer range 0 to 9;
	   c_in_1_d : in integer range 0 to 9;
		c_out_1_u : in integer range 0 to 9;
		c_out_1_d : in integer range 0 to 9;
		c_in_2_u : in integer range 0 to 9;
		c_in_2_d : in integer range 0 to 9;
		c_out_2_u : in integer range 0 to 9;
		c_out_2_d : in integer range 0 to 9;
		c_lot_1_u : in integer range 0 to 9;
		c_lot_1_d : in integer range 0 to 9;
		c_lot_2_u: in integer range 0 to 9;
		c_lot_2_d: in integer range 0 to 9;
		sw0 : in STD_LOGIC;
	   sw1 : in STD_LOGIC;
	   sw2 : in STD_LOGIC;
	   sw3 : in STD_LOGIC;
		algarismo : OUT std_logic_vector(7 downto 0) 
		); 
END COMPONENT;

COMPONENT Functions 
    Port ( clk : in  STD_LOGIC;
           reset : in  STD_LOGIC;
			  carro_IN_Piso1 : in STD_LOGIC;
			  carro_IN_1_Piso2 : in STD_LOGIC;
			  carro_IN_2_Piso2 : in STD_LOGIC;
			  carro_OUT_Piso1 : in STD_LOGIC;
			  carro_OUT_1_Piso2 : in STD_LOGIC;
			  carro_OUT_2_Piso2 : in STD_LOGIC;
			  conta_IN_Piso1_mu : out integer range 0 to 9;
			  conta_IN_Piso1_md : out integer range 0 to 9;
			  conta_IN_Piso2_mu : out integer range 0 to 9;
			  conta_IN_Piso2_md : out integer range 0 to 9;
			  conta_OUT_Piso1_mu : out integer range 0 to 9;
			  conta_OUT_Piso1_md : out integer range 0 to 9;
			  conta_OUT_Piso2_mu : out integer range 0 to 9;
			  conta_OUT_Piso2_md : out integer range 0 to 9;
				conta_lot_1_mu: out integer range 0 to 9;
				conta_lot_1_md: out integer range 0 to 9;
				conta_lot_2_mu : out integer range 0 to 9;
				conta_lot_2_md : out integer range 0 to 9;
				carro_12 : in STD_LOGIC;
				carro_21: in STD_LOGIC
			);
end COMPONENT;
			
  
signal PRES1_IN_aux, TICKET_IN_aux, PRES2_IN_aux, PRESS1_OUT_aux, PRESS2_OUT_aux, TICKET_OUT_aux  : STD_LOGIC;
signal AND_21A_aux ,AND_21B_aux : STD_LOGIC;
signal PRESS1_IN_2_aux, PRESS2_IN_2_aux, TICKET_IN_2_aux, PRESS1_OUT_2_aux, PRESS2_OUT_2_aux, TICKET_OUT_2_aux : STD_LOGIC;
signal PRESS1_IN_3_aux, PRESS2_IN_3_aux, TICKET_IN_3_aux, PRESS1_OUT_3_aux, PRESS2_OUT_3_aux, TICKET_OUT_3_aux : STD_LOGIC;
signal AND_12A_aux, AND_12B_aux : STD_LOGIC;
signal CANC_IN_aux, CANC_OUT_aux, CANC_IN_2_aux, CANC_OUT_2_aux, CANC_IN_3_aux, CANC_OUT_3_aux : STD_LOGIC;
signal PISO2_FULL_aux, PISO1_FULL_aux : STD_LOGIC;
signal LED_inc_min_aux, LED_inc_hour_aux : STD_LOGIC;
signal button_acerta_aux : STD_LOGIC; 
signal OCU_PISO_1_aux, OCU_PISO_2_aux : integer range 0 to 100;
signal carro_in_aux,carro_in_2_aux,carro_in_3_aux,carro_out_aux,carro_out_2_aux,carro_out_3_aux : STD_LOGIC;
signal c_in_1_u_aux, c_in_1_d_aux, c_lot_1_u_aux, c_lot_1_d_aux, c_lot_2_u_aux, c_lot_2_d_aux : integer range 0 to 9;
signal c_in_2_u_aux, c_in_2_d_aux, c_out_1_u_aux, c_out_1_d_aux, c_out_2_u_aux, c_out_2_d_aux: integer range 0 to 9;
signal lug_in_1_aux, modo_relogio_aux: STD_LOGIC;
signal aberto_in_aux, aberto_out_aux : STD_LOGIC;
signal carro_12_aux, carro_21_aux : STD_LOGIC;

signal c_min_u_aux, c_hour_u_aux: integer range 0 to 9;  
signal i_min_u_aux, i_hour_u_aux: integer range 0 to 9;
signal c_min_d_aux: integer range 0 to 5;
signal i_min_d_aux: integer range 0 to 5;
signal c_hour_d_aux: integer range 0 to 2; 
signal i_hour_d_aux: integer range 0 to 2; 
signal min_inc_aux, hora_inc_aux: STD_LOGIC;
signal modo_inc_aux : STD_LOGIC;
signal inc_aux, clear_inc_aux : STD_LOGIC;
signal inc_finish_aux, update_time_aux : STD_LOGIC;
signal button_modo_inc_aux, button_inc_aux : STD_LOGIC;


  -- Internal signals:

BEGIN

    U_parque_final : parque_final Port Map(
        Clk => Clk,
        PRES1_IN => PRES1_IN_aux,
        TICKET_IN => TICKET_IN_aux,
        PRES2_IN => PRES2_IN_aux,
        PRESS1_OUT => PRESS1_OUT_aux,
        PRESS2_OUT => PRESS2_OUT_aux,
        TICKET_OUT => TICKET_OUT_aux,
        AND_21A => AND_21A_aux,
        AND_21B => AND_21B_aux,
        PRESS1_IN_2 => PRESS1_IN_2_aux,
        PRESS2_IN_2 => PRESS2_IN_2_aux,
        TICKET_IN_2 => TICKET_IN_2_aux,
        PRESS1_OUT_2 => PRESS1_OUT_2_aux,
        PRESS2_OUT_2 => PRESS2_OUT_2_aux,
        TICKET_OUT_2 => TICKET_OUT_2_aux,
        PRESS1_IN_3 => PRESS1_IN_3_aux,
        PRESS2_IN_3 => PRESS2_IN_3_aux,
        TICKET_IN_3 => TICKET_IN_3_aux,
        PRESS1_OUT_3 => PRESS1_OUT_3_aux,
        PRESS2_OUT_3 => PRESS2_OUT_3_aux,
        TICKET_OUT_3 => TICKET_OUT_3_aux,
        AND_12A => AND_12A_aux,
        AND_12B => AND_12B_aux,
		  CANC_IN => CANC_IN_aux,
        CANC_OUT => CANC_OUT_aux,
        CANC_IN_2 => CANC_IN_2_aux,
        CANC_OUT_2 => CANC_OUT_2_aux,
        PISO2_FULL => PISO2_FULL_aux,
        PISO1_FULL => PISO1_FULL_aux,
        CANC_OUT_3 => CANC_OUT_3_aux,
        CANC_IN_3 => CANC_IN_3_aux,	
		  OCU_PISO_1 => OCU_PISO_1_aux,
		  OCU_PISO_2 => OCU_PISO_2_aux,
		  CARRO_IN_2 => carro_in_2_aux,
		  CARRO_IN_3 => carro_in_3_aux,
		  CARRO_IN => carro_in_aux,
		  CARRO_OUT => carro_out_aux,
		  CARRO_OUT_2 => carro_out_2_aux,
		  CARRO_OUT_3 => carro_out_3_aux,
		  Carro_12 => carro_12_aux,
		  Carro_21 => carro_21_aux,
		  ABERTO_IN => aberto_in_aux,
	     ABERTO_OUT => aberto_out_aux,
        Enable => Enable,
        Reset => Reset
    );
	 
	 int : interface Port Map(
			clk => clk,
			rst => Reset,
			sw0 => sw0,
			sw1 => sw1,
			sw2 => sw2,
			sw3 => sw3,
			sw4 => sw4,
			sw5 => sw5,
			sw6 => sw6,
			sw7 => sw7,
			led_0 => led0,
			led_1 => led1,
			led_2 => led2,
			led_3 => led3,
			led_4 => led4,
			led_5 => led5,
			led_6 => led6,
			led_7 => led7,
			PRES1_IN => PRES1_IN_aux,
			TICKET_IN => TICKET_IN_aux,
         PRES2_IN => PRES2_IN_aux,
         PRESS1_OUT => PRESS1_OUT_aux,
         PRESS2_OUT => PRESS2_OUT_aux,
         TICKET_OUT => TICKET_OUT_aux,
			AND_21A => AND_21A_aux,
			AND_21B => AND_21B_aux,
			PRESS1_IN_2 => PRESS1_IN_2_aux,
			PRESS2_IN_2 => PRESS2_IN_2_aux,
			TICKET_IN_2 => TICKET_IN_2_aux,
			PRESS1_OUT_2 => PRESS1_OUT_2_aux,
			PRESS2_OUT_2 => PRESS2_OUT_2_aux,
			TICKET_OUT_2 => TICKET_OUT_2_aux,
			PRESS1_IN_3 => PRESS1_IN_3_aux,
			PRESS2_IN_3 => PRESS2_IN_3_aux,
			TICKET_IN_3 => TICKET_IN_3_aux,
			PRESS1_OUT_3 => PRESS1_OUT_3_aux,
			PRESS2_OUT_3 => PRESS2_OUT_3_aux,
			TICKET_OUT_3 => TICKET_OUT_3_aux,
			AND_12A => AND_12A_aux,
			AND_12B => AND_12B_aux,
			CANC_IN => CANC_IN_aux,
			CANC_OUT => CANC_OUT_aux,
			CANC_IN_2 => CANC_IN_2_aux,
			CANC_OUT_2 => CANC_OUT_2_aux,
			PISO2_FULL => PISO2_FULL_aux,
			PISO1_FULL => PISO1_FULL_aux,
			CANC_OUT_3 => CANC_OUT_3_aux,
			CANC_IN_3 => CANC_IN_3_aux,
			pressure_button_1 => button_1,
			pressure_button_2 => button_2,
			pressure_button_3 => button_3,
			b_clock => button_acerta_aux,
			b_modo_inc => button_modo_inc_aux,
			b_inc => button_inc_aux,
			inc_min => LED_inc_min_aux,
			inc_hour => LED_inc_hour_aux,
			ocupacao_1 => OCU_PISO_1_aux,
			ocupacao_2 => OCU_PISO_2_aux,
			--lot_d => lot_d_aux,
			--lot_u => lot_u_aux,
			lug_in_1 => lug_in_1_aux,
		   modo_relogio => modo_relogio_aux
--			modo_relogio => modo_relogio_aux
	 );
	 
	 	r : relogio 
	port map(reset => reset, 
				clk => clk,  
				c_min_u => c_min_u_aux, 
				c_min_d => c_min_d_aux,
				c_hour_u => c_hour_u_aux,
				c_hour_d => c_hour_d_aux,
            new_min_u => i_min_u_aux,
            new_min_d => i_min_d_aux,
            new_hour_u => i_hour_u_aux,
            new_hour_d => i_hour_d_aux,
			   update_time => update_time_aux,
				aberto_in => aberto_in_aux,
				aberto_out => aberto_out_aux
				); 
				
	cd : conv_displays 
	port map(reset => reset, 
				clk => clk,
--				modo_rel => modo_relogio_aux,
				--lotu => lot_u_aux,
				--lotd => lot_d_aux,
				--p1_full => PISO1_FULL_aux,
				--p2_full => PISO2_FULL_aux,
				modo_inc => modo_inc_aux,
				min_u => c_min_u_aux, 
				min_d => c_min_d_aux, 
				hour_u => c_hour_u_aux,
				hour_d => c_hour_d_aux,
            i_min_u => i_min_u_aux,
            i_min_d => i_min_d_aux,
            i_hour_u => i_hour_u_aux,
            i_hour_d => i_hour_d_aux,
				algarismo => algarismo, 
				an3 => an3, 
				an2 => an2, 
				an1 => an1, 
				an0 => an0,
				lug_in_1 => lug_in_1_aux,
			   c_in_1_u => c_in_1_u_aux,
			   c_in_1_d => c_in_1_d_aux,
				c_out_1_u => c_out_1_u_aux,
				c_out_1_d => c_out_1_d_aux,
				c_in_2_u => c_in_2_u_aux,
			   c_in_2_d => c_in_2_d_aux,
				c_out_2_u => c_out_2_u_aux,
				c_out_2_d => c_out_2_d_aux,
				c_lot_1_u => c_lot_1_u_aux,
			   c_lot_1_d => c_lot_1_d_aux,
				c_lot_2_u => c_lot_2_u_aux,
				c_lot_2_d => c_lot_2_d_aux,
				sw0 => sw7,
			   sw1 => sw6,
			   sw2 => sw5,
			   sw3 => sw4,
				modo_relogio => modo_relogio_aux
				);
				 
	
	p_st: principal_st_mach
	port map(clk => clk,
           reset => reset,
			  button_acerta => button_acerta_aux,
			  button_modo_inc => button_modo_inc_aux,
			  modo_inc => modo_inc_aux,
			  inc_finish => inc_finish_aux,
			  update_time => update_time_aux
			  );
				
		  
	incre: incrementador
	port map(clk => clk,
				  reset => reset,
				  clear_inc => clear_inc_aux,
				  inc => inc_aux,
				  min_inc => min_inc_aux,
				  hora_inc => hora_inc_aux,
				  new_min_u => i_min_u_aux,
				  new_min_d => i_min_d_aux,
				  new_hora_u => i_hour_u_aux,
				  new_hora_d => i_hour_d_aux
				  );
		
	i_s_m: inc_st_mach 
    port map(clk => clk,
           reset => reset,
			  clear_inc => clear_inc_aux,
			  button_inc => button_inc_aux,
			  button_modo_inc => button_modo_inc_aux,
			  button_acerta => button_acerta_aux,
			  LED_inc_min => LED_inc_min_aux,
			  LED_inc_hour => LED_inc_hour_aux,
           inc => inc_aux,
			  min_inc => min_inc_aux,
			  hora_inc => hora_inc_aux,
			  modo_inc => modo_inc_aux,
			  inc_finish => inc_finish_aux
			  );
			  
	func: functions
	port map(clk => clk,
           reset => reset,
			  carro_IN_Piso1 => carro_in_aux,
			  carro_IN_1_Piso2 => carro_in_2_aux,
			  carro_IN_2_Piso2 => carro_in_3_aux,
			  carro_OUT_Piso1 => carro_out_aux,
			  carro_OUT_1_Piso2 => carro_out_2_aux,
			  carro_OUT_2_Piso2 => carro_out_3_aux,
			  conta_IN_Piso1_mu => c_in_1_u_aux,
			  conta_IN_Piso1_md => c_in_1_d_aux,
			  conta_IN_Piso2_mu => c_in_2_u_aux,
			  conta_IN_Piso2_md => c_in_2_d_aux,
			  conta_OUT_Piso1_mu => c_out_1_u_aux,
			  conta_OUT_Piso1_md => c_out_1_d_aux,
			  conta_OUT_Piso2_mu => c_out_2_u_aux,
			  conta_OUT_Piso2_md => c_out_2_d_aux,
			  conta_lot_1_mu => c_lot_1_u_aux,
			  conta_lot_1_md => c_lot_1_d_aux,
			  conta_lot_2_mu => c_lot_2_u_aux,
			  conta_lot_2_md => c_lot_2_d_aux,
			  carro_12 => carro_12_aux,
			  carro_21 => carro_21_aux
			);

	

End Structural;
